#!/bin/sh

# this script performs the finishing touches required to make the system more
# usable

# NOTE: all functions prefixed with a underscore (_) are helper functions and
# shouldn't be considered as installation steps

# TODO: think of a way of supporting containerized wayland workspaces without
#       having to install a wayland-only dependency for keeping things minimal
#       (in this case, the dependency being "seatd")

# ------------------------------------------------------------------------------

# exit on errors
set -e

# displays a given message in a nicely formatted box
_infobox() {
	border_length=$(( ${#1} + 2 ))
	printf "\n${bold}%${border_length}s\n" | tr " " "="
	echo " $1 "
	printf "%${border_length}s${normal}\n\n" | tr " " "="
}

# comments out a list of given installation steps to avoid running them again on
# a subsequent execution of this script
_complete_steps() {
	for step in "$@"; do
		sed -i "s/^$step$/#$step/" "$0"
	done
}

# displays a welcome message specifying a summary of actions that will be
# performed by the script, and prompt the user for confirmation to proceed with
# the post-installation process
welcome() {
    clear
    echo "This post-installation script will perform the following tasks:"
    echo "- Install a set of essential packages"
    echo "- Replace 'mdev' with 'eudev'"
    echo "- Create a non-root user ($USER_NAME)"
    echo "- Enable the Docker service to run at boot (and start it)"
    echo
    read -rp "Proceed? (y/N) " proceed
    if echo "$proceed" | grep -vE "^[yY]$"; then
        exit
    fi
}

# installs a set of packages to make the system more usable
# ---------------------------------------------------------
# doas -> grant superuser permissions to the non-root user
# docker -> run containerized applications from "docker-experiment"
# git -> create and clone git repositories
# make -> create and run tasks from Makefiles (required by "docker-experiment")
# eudev -> replaces "mdev" with proper support for keyboard and mouse on Xorg
# seatd -> required for running wayland compositors
# alsa-utils -> provides "alsamixer" which is used to control the audio volume
# pulseaudio -> required to make the audio work properly
# pulseaudio-utils -> provides "pactl" which is used to generate "pulseaudio"
#                     shared sockets to be used in containerized applications
# udev-init-scripts -> required for udev to work
# udev-init-scripts-openrc -> required for udev to work
install_essential_packages() {
    _infobox "Installing essential packages"
    apk add doas docker git make eudev seatd alsa-utils pulseaudio pulseaudio-utils udev-init-scripts udev-init-scripts-openrc

    _complete_steps install_packages
}

# disables "mdev" and delete it's service from openrc
# mouse and keyboard don't work properly on Xorg with "mdev", "eudev" is
# required
disable_mdev() {
    rc-service -s mdev stop
    rc-update delete mdev sysinit

    _complete_steps disable_mdev
}

# enables "eudev" and it's services
enable_eudev() {
    rc-update add udev sysinit
    rc-update add udev-trigger sysinit
    rc-update add udev-settle sysinit
    rc-update add udev-postmount default
    rc-service udev start

    _complete_steps enable_eudev
}

# enables "seatd" in order to run wayland compositors
enable_seatd() {
    _infobox "Enabling seatd service to run on boot"
    rc-update add seatd
    rc-service seatd start

    _complete_steps enable_seatd
}

# creates a non-root user using the "$USER_NAME" defined on the answerfile
# password is prompted as usual, for security reasons
create_user() {
    _infobox "Creating '$USER_NAME' user"
    adduser "$USER_NAME"

    _infobox "Giving super user permissions to '$USER_NAME'"
    echo "permit $USER_NAME as root" > /etc/doas.d/doas.conf

    _infobox "Adding '$USER_NAME' to 'video', 'input' and 'audio' groups"
    addgroup "$USER_NAME" video
    addgroup "$USER_NAME" input
    addgroup "$USER_NAME" audio

    _complete_steps create_user
}

# enables docker service to run on boot, starts it, and add the non-root user
# to the "docker" group so it can be accessed by them
enable_docker_service() {
    _infobox "Enabling Docker service to run on boot"
    rc-update add docker
    rc-service docker start

    _infobox "Adding user '$USER_NAME' to 'docker' group"
    adduser hbr docker

    _complete_steps enable_docker_service welcome
}

welcome
install_essential_packages
disable_mdev
enable_eudev
enable_seatd
create_user
enable_docker_service

_infobox "Post-installation finished!"
apk del alpine.sh
