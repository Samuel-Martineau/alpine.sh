#!/bin/sh
# Copyright 2021,2022 Henrique Borges
# Copyright 2023 Samuel Martineau

# this script performs the finishing touches required to make the system more
# usable

# NOTE: all functions prefixed with a underscore (_) are helper functions and
# shouldn't be considered as installation steps

# ------------------------------------------------------------------------------

# exit on errors
set -e

# displays a given message in a nicely formatted box
_infobox() {
	border_length=$(( ${#1} + 2 ))
	printf "\n${bold}%${border_length}s\n" | tr " " "="
	echo " $1 "
	printf "%${border_length}s${normal}\n\n" | tr " " "="
}

# comments out a list of given installation steps to avoid running them again on
# a subsequent execution of this script
_complete_steps() {
	for step in "$@"; do
		sed -i "s/^$step$/#$step/" "$0"
	done
}

# displays a welcome message specifying a summary of actions that will be
# performed by the script, and prompt the user for confirmation to proceed with
# the post-installation process
welcome() {
    export USER_NAME=$(cat /etc/group | grep wheel | cut -d : -f 4 | cut -d , -f 2)
    clear
    echo "This post-installation script will perform the following tasks:"
    echo "- Install a set of essential packages"
    echo "- Setup non-root user ($USER_NAME) password, and add it to the 'docker' group"
    echo "- Enable the Docker service to run at boot (and start it)"
    echo "- Setup Mailrise and notifications"
    echo "- Setup SSHD and other general settings"
    echo
    read -rp "Proceed? (y/N) " proceed
    if echo "$proceed" | grep -vE "^[yY]$"; then
        exit
    fi
}

# installs a set of packages to make the system more usable
install_essential_packages() {
    _infobox "Installing essential packages"
    apk update
    apk upgrade
    apk add docker git vim man-pages mandoc mandoc-apropos mailx bash python3 py3-pip shadow docs

    _complete_steps install_essential_packages
}

# set the non-root user password
# create the non-root user directory
# add the non-root user to the 'docker' group (allowing to run docker commands)
setup_user() {
    _infobox "Setting up '$USER_NAME' password"
    passwd "$USER_NAME"

    # for some strange reason, user directories created with setup-user doesn't
    # persist reboot
    _infobox "Creating '$USER_NAME' user directory at '/home/$USER_NAME'"
    mkdir -p /home/$USER_NAME
    chown -R $USER_NAME:$USER_NAME /home/$USER_NAME

    _infobox "Adding '$USER_NAME' to the 'docker' group"
    addgroup "$USER_NAME" docker

    _infobox "Setting '$USER_NAME' shell to bash"
    chsh -s /bin/bash admin

    _complete_steps setup_user
}


# enables docker service to run on boot and starts it
enable_docker_service() {
    _infobox "Enabling Docker service to run on boot"
    rc-update add docker
    rc-service docker start

    # docker-in-docker requires the "tun" kernel module in order to work properly
    # as this module is not built-in into Alpine's stock kernel, we need to initialize
    # it on boot
    echo tun >> /etc/modules

    _complete_steps enable_docker_service
}

setup_mailrise_notifications() {
    _infobox "Setting up Mailrise"

    pip install --root-user-action=ignore           PyYAML==6.0.1 apprise aiosmtpd
    pip install --root-user-action=ignore --no-deps mailrise

    read -p "Enter pushover user key: " POVER_USER_KEY
    read -p "Enter pushover API token: " POVER_API_TOKEN
    cat << EOF > /etc/mailrise.conf
configs:
  pushover:
    urls:
      - pover://${POVER_USER_KEY}@${POVER_API_TOKEN}
listen:
  port: 25
  host: localhost

EOF
    chmod 600 /etc/mailrise.conf

    cat << EOF > /etc/init.d/mailrise
#!/sbin/openrc-run

name="mailrise"
command="/usr/bin/mailrise"
command_args="/etc/mailrise.conf"
pidfile="/run/${RC_SVCNAME}.pid"
command_background=true

EOF

    chmod +x /etc/init.d/mailrise
    
    rc-service mailrise start

    _infobox "Setting up notifications"

    cat << EOF > /usr/local/bin/notify
#!/bin/bash

echo "\$4" | mail -s "\$3" -r "\$2" "\$1@mailrise.xyz"

EOF
    chmod 755 /usr/local/bin/notify

    cat << EOF > /usr/local/bin/ssh-shell
#!/bin/bash

ip=\`echo \$SSH_CONNECTION | cut -d " " -f 1\`
/usr/local/bin/notify pushover \$USER@\$(hostname) "SSH Login" "User \$USER just logged in from \$ip"

if [[ -n \$SSH_ORIGINAL_COMMAND ]] # command given, so run it
then
    exec /bin/bash -c "\$SSH_ORIGINAL_COMMAND"
else # no command, so interactive login shell
    exec bash -il
fi

EOF
    chmod 755 /usr/local/bin/ssh-shell

    cat << EOF > /etc/periodic/daily/check-updates
#/bin/bash

apk update
AVAILABLE_UPDATES=\$(apk list -u)
if [ ! -z "\$AVAILABLE_UPDATES" ]
then
    notify pushover cron@\$(hostname) "Available updates" "\$AVAILABLE_UPDATES"
fi

EOF
    chmod 755 /etc/periodic/daily/check-updates

    _complete_steps setup_mailrise_notifications
}

setup_sshd_general_settings() {
    _infobox "Setting up SSHD"

    echo -e "Include /etc/ssh/sshd_config.d/*.conf\n$(cat /etc/ssh/sshd_config)" > /etc/ssh/sshd_config
    
    mkdir /etc/ssh/sshd_config.d

    cat << EOF > /etc/ssh/sshd_config.d/harden.conf
PermitRootLogin no
PasswordAuthentication no
ChallengeResponseAuthentication no
X11Forwarding no
PermitUserEnvironment no
AllowAgentForwarding no
AllowTcpForwarding no
PermitTunnel no
ForceCommand /usr/local/bin/ssh-shell

EOF

    rc-service sshd restart

    _infobox "Enable prompt color"
    mv /etc/profile.d/color_prompt.sh.disabled /etc/profile.d/color_prompt.sh

    _infobox "Disabling MOTD"
    echo -n "" | tee /etc/motd

    _infobox "Setting 'root' shell to bash"
    chsh -s /bin/bash root

    _complete_steps setup_sshd_general_settings
}

welcome
install_essential_packages
setup_user
enable_docker_service
setup_mailrise_notifications
setup_sshd_general_settings
_complete_steps welcome

_infobox "Post-installation finished!"
apk del alpine.sh
